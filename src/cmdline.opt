#define EX_USAGE 1

OPTIONS_BEGIN("direvent",
              [<GNU direvent monitors changes in directories>],
              [<[CONFIG]>],
              [<gnu>],
              [<copyright_year=2012-2014>],
              [<copyright_holder=Sergey Poznyakoff>])

OPTION(debug,d,,
       [<increase debug level>])
BEGIN       
	opt_debug_level++;
END

OPTION(,l,PRIO,
       [<log everything with priority PRIO and higher to the stderr, as well as to the syslog>])
BEGIN
	if (strcmp(optarg, "none") == 0)
		log_to_stderr = -1;
	else
		log_to_stderr = get_priority(optarg);
END
       
OPTION(facility,F,NAME,
       [<set syslog facility>])
BEGIN       
	opt_facility = get_facility(optarg);
END

OPTION(foreground,f,,
       [<remain in foreground>])
BEGIN       
	opt_foreground++;
END

OPTION(include-directory,I,DIR,
       [<add include directory>])
BEGIN
        grecs_preproc_add_include_dir(optarg);
END
	 
OPTION(self-test,T,PROG,
       [<self-test mode>])
BEGIN
	self_test_prog = optarg;
END	

OPTION(pidfile,P,FILE,
       [<set PID file>])
BEGIN       
	opt_pidfile = optarg;
END	

OPTION(lint,t,,
       [<check configuration file and exit>])
BEGIN       
	lint_only = 1;
END

OPTION(user,u,USER,
       [<run as this user>])
BEGIN
	opt_user = optarg;
	if (!getpwnam(opt_user)) {
		diag(LOG_CRIT, "no such user: %s", opt_user);
		exit(1);
	}
END
	      
OPTION(config-help,H,,
       [<show configuration file summary>])
BEGIN
	config_help();
	exit(0);
END
	   

OPTIONS_END

static int
print_dir(int flag, const char *dir, void *data)
{
	FILE *fp = data;
	fprintf(fp, "%s\n", dir);
	return 0;
}

static void
help_hook(FILE *fp)
{
	fprintf(fp,
		_("The optional CONFIG argument supplies the name of the "
		  "configuration file\n"
	          "to use instead of %s.\n\n"), DEFAULT_CONFFILE); 
	/* TRANSLATORS: %s is one of: inotify, kqueue */
	fprintf(fp, _("This direvent uses %s interface.\n\n"), INTERFACE);

	if (grecs_include_path_count(GRECS_STD_INCLUDE)) {
		fprintf(fp, _("Include search path:\n"));
		grecs_foreach_include_dir(GRECS_STD_INCLUDE, print_dir, fp);
	} else
		fprintf(fp, _("No include search path.\n"));
	fprintf(fp, "\n");
}

void
parse_options(int argc, char *argv[], int *index)
{
	proginfo.print_help_hook = help_hook;
	GETOPT(argc, argv, *index)
}
  